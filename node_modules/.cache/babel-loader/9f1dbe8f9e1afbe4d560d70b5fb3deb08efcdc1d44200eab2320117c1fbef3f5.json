{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\OWNER\\\\OneDrive\\\\Desktop\\\\React (Internship)\\\\React\\\\react_hook\\\\weather-app\\\\src\\\\temp.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Weathercard from './Weathercard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Temp = () => {\n  _s();\n  const [searchValue, setSearchValue] = useState('surat');\n  const [tempInfo, setTempInfo] = useState({});\n\n  //call real data \n  const getWeatherInfo = async () => {\n    try {\n      let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=3313bf85356affb485e03077a8a3806e`;\n      const res = await fetch(url);\n      const data = await res.json();\n      const {\n        temp,\n        humidity,\n        pressure\n      } = data.main;\n      const {\n        main: weathermood\n      } = data.weather[0];\n      const {\n        name\n      } = data;\n      const {\n        speed\n      } = data.wind;\n      const {\n        country,\n        sunset\n      } = data.sys;\n      const myNewWeatherInfo = {\n        temp,\n        humidity,\n        weathermood,\n        pressure,\n        name,\n        speed,\n        country,\n        sunset\n      };\n      setTempInfo(myNewWeatherInfo);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    getWeatherInfo();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"wrap\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"search\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"search\",\n          placeholder: \"search...\",\n          autoFocus: true,\n          id: \"search\",\n          className: \"searchTerm\",\n          value: searchValue,\n          onChange: e => setSearchValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"searchButton\",\n          type: \"search\",\n          onClick: getWeatherInfo,\n          children: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Weathercard, {\n      tempInfo: tempInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(Temp, \"2ydIZj4B8GVIjU0meD32tud6gbk=\");\n_c = Temp;\nexport default Temp;\nvar _c;\n$RefreshReg$(_c, \"Temp\");","map":{"version":3,"names":["React","useEffect","useState","Weathercard","jsxDEV","_jsxDEV","Fragment","_Fragment","Temp","_s","searchValue","setSearchValue","tempInfo","setTempInfo","getWeatherInfo","url","res","fetch","data","json","temp","humidity","pressure","main","weathermood","weather","name","speed","wind","country","sunset","sys","myNewWeatherInfo","error","console","log","children","className","type","placeholder","autoFocus","id","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/OWNER/OneDrive/Desktop/React (Internship)/React/react_hook/weather-app/src/temp.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport './App.css';\r\nimport Weathercard from './Weathercard';\r\n\r\nconst Temp = () => {\r\n    const [searchValue, setSearchValue] = useState('surat')\r\n    const [tempInfo, setTempInfo] = useState({})\r\n\r\n\r\n    //call real data \r\n    const getWeatherInfo = async () => {\r\n        try {\r\n            let url = `https://api.openweathermap.org/data/2.5/weather?q=${searchValue}&units=metric&appid=3313bf85356affb485e03077a8a3806e`\r\n\r\n            const res = await fetch(url)\r\n            const data = await res.json()\r\n\r\n            const { temp, humidity, pressure } = data.main\r\n            const { main: weathermood } = data.weather[0]\r\n            const { name } = data\r\n            const { speed } = data.wind\r\n            const { country, sunset } = data.sys\r\n\r\n            const myNewWeatherInfo = {\r\n                temp,\r\n                humidity,\r\n                weathermood,\r\n                pressure,\r\n                name,\r\n                speed,\r\n                country,\r\n                sunset\r\n            }\r\n\r\n            setTempInfo(myNewWeatherInfo)\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getWeatherInfo()\r\n    }, [])\r\n    return (\r\n        <>\r\n            <div className='wrap'>\r\n                <div className=\"search\">\r\n                    <input type='search'\r\n                        placeholder='search...'\r\n                        autoFocus\r\n                        id='search'\r\n                        className='searchTerm'\r\n                        value={searchValue}\r\n                        onChange={(e) => setSearchValue(e.target.value)}\r\n\r\n                    />\r\n                    <button className='searchButton' type='search' onClick={getWeatherInfo}>Search</button>\r\n                </div>\r\n            </div>\r\n\r\n            {/*our temp card*/}\r\n            <Weathercard tempInfo={tempInfo} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Temp"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}